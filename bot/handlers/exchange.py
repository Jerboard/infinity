from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter

from asyncio import sleep
from datetime import datetime

import db
import keyboards as kb
from config import Config
from init import dp, bot
import utils as ut
from functions.async_utilits import del_order
from enums import CB, Key, UserStatus, Action, OrderStatus


# –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–∞—Ç—å
# @dp.callback_query(text=['‚≠ïÔ∏è –ü—Ä–æ–¥–∞—Ç—å'], state='*')
# @dp.callback_query(lambda cb: cb.data.startswith(CB.EXCHANGE.value))
# async def russian_rub(msg: Message):
#     user = await db.get_user_info(msg.from_user.id)
#
#     text = '<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É</b>'
#     photo_id = photos['sell']
#     await msg.answer_photo(photo_id, text, reply_markup=kb.get_sell_rub_kb())


# –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
# @dp.message(text=['‚úÖ –ö—É–ø–∏—Ç—å'], state='*')
@dp.callback_query(lambda cb: cb.data.startswith(CB.EXCHANGE.value))
async def select_currency(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    check_orders = await db.get_orders(user_id=cb.from_user.id, check=True)

    if check_orders:
        text = '–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞'
        await cb.message.answer(text)
    else:
        await state.set_state(UserStatus.EXCHANGE)

        text = 'üîÑ–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'
        currency = await db.get_all_currency()
        await ut.send_msg(
            msg_key=Key.SELECT_CURRENCY.value,
            chat_id=cb.message.chat.id,
            edit_msg=cb.message.message_id,
            text=text,
            keyboard=kb.get_currency_list_kb(currency)
        )


# –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda cb: cb.data.startswith(CB.SELECT_PAYMENT.value))
async def send_sum(cb: CallbackQuery, state: FSMContext):
    _, currency_id_str = cb.data.split(':')

    if currency_id_str != 'back':
        currency_id = int(currency_id_str)
        currency = await db.get_currency(currency_id)
        currency_name = f'{currency.name} ({currency.code})'
        await state.update_data(data={
            'user_id': cb.message.from_user.id,
            'currency_id': currency.id,
            'currency_name': currency_name,
            'message_id': cb.message.message_id
        })

    else:
        data = await state.get_data()
        currency = await db.get_currency(data['currency_id'])
        currency_name = data['currency_name']

    min_sum = currency.min if currency.min != 0 else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'
    text = (f'üí∞–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ {currency_name} –∏–ª–∏ –≤ —Ä—É–±–ª—è—Ö (RUB)  \n\n'
            f'–ü—Ä–∏–º–µ—Ä: {min_sum} –∏–ª–∏ {str(min_sum).replace(".", ",")} –∏–ª–∏ 5000\n\n')

    await state.set_state(UserStatus.EXCHANGE_SEND_SUM)
    await ut.send_msg(
        msg_key=Key.SEND_SUM.value,
        chat_id=cb.message.chat.id,
        edit_msg=cb.message.message_id,
        text=text,
        keyboard=kb.get_back_kb(CB.EXCHANGE.value)
    )


# –ø—Ä–∏—ë–º —Å—É–º–º—ã –º–æ–Ω–µ—Ç—ã –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.message(StateFilter(UserStatus.EXCHANGE_SEND_SUM))
async def sum_exchange(msg: Message, state: FSMContext):
    input_sum = msg.text.replace(',', '.')
    if not ut.is_digit(input_sum):
        sent = await msg.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞')
        await sleep(3)
        await msg.delete()
        await sent.delete()

    else:
        input_sum = float(input_sum)
        data = await state.get_data()
        # await state.set_state('exchange_send_sum')

        currency = await db.get_currency(data['currency_id'])

        # –∑–∞—á–µ–º —Ç—É—Ç +1
        currency_rate = round(currency.rate * ((currency.ratio / 100) + 1))

        if input_sum <= currency.max:
            sum_coin = input_sum
            sum_rub = round((sum_coin * currency_rate)) + currency.commission
        else:
            sum_rub = input_sum
            sum_coin = (sum_rub - currency.commission) / currency_rate

        min_rub = round(currency_rate * currency.min)
        max_rub = round(currency_rate * currency.max)

        if sum_coin < currency.min:
            text = (f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞\n'
                    f'–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ:\n'
                    f'{currency.min} {currency.code}\n'
                    f'{min_rub} —Ä—É–±.')

            reply_markup = None

        elif sum_coin > currency.max:
            text = f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞\n' \
                   f'–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ:\n' \
                   f'{currency.max} {currency.code}\n' \
                   f'{max_rub} —Ä—É–±.'

            reply_markup = None

        else:
            sum_coin = round(sum_coin, currency.round)
            await state.update_data(data={
                'amount': sum_rub,
                'total_amount': sum_rub,
                'sum_exchange': sum_coin,
                'rate': currency_rate,
                'start_time': datetime.now(),
                'commission': currency.commission
})

            user_data = await db.get_user_info(msg.from_user.id)
            balance = user_data.balance if user_data.balance else 0
            text = f'–°—Ä–µ–¥–Ω–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å: {currency_rate} —Ä—É–±.\n\n' \
                   f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ: {sum_coin} {currency.code}\n\n' \
                   f'–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance} —Ä—É–±.\n\n' \
                   f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:'

            pay_methods = await db.get_all_pay_method()
            reply_markup = kb.get_pay_method_kb(sum_rub=sum_rub, pay_methods=pay_methods)

        try:
            # await state.update_data(data={'chat_id': sent.chat.id, 'message_id': sent.message_id})

            await ut.send_msg(
                msg_key=Key.SUM_EXCHANGE.value,
                chat_id=msg.chat.id,
                edit_msg=data['chat_id'],
                text=text,
                keyboard=reply_markup
            )

        except TelegramBadRequest as ex:
            pass


# –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ LevL7S8DNFGQWnRrtjzhEJHRcPBMYCLwWC ltc
@dp.callback_query(lambda cb: cb.data.startswith(CB.SEND_WALLET.value))
async def save_pay_method(cb: CallbackQuery, state: FSMContext):
    _, pay_method_str = cb.data.split(':')

    if pay_method_str != Action.BACK:
        pay_method = await db.get_pay_method(method_id=int(pay_method_str))
        await state.update_data(data={
            'pay_method': pay_method.name,
            'pay_method_id': pay_method.id})

    data = await state.get_data()
    await state.set_state(UserStatus.EXCHANGE_SEND_WALLET)

    text = f'<b>–£–∫–∞–∂–∏ {data["currency_name"]}-–ö–æ—à–µ–ª–µ–∫:</b>'
    await ut.send_msg(
        msg_key=Key.SAVE_PAY_METHOD.value,
        chat_id=cb.message.chat.id,
        edit_msg=cb.message.chat.id,
        text=text,
        keyboard=kb.get_back_kb(CB.SELECT_PAYMENT.value)
    )


# ===========================================================================================
# —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É
async def check_info_output(data: dict):
    currency = await db.get_currency(data['currency_id'])

    text = ut.get_check_info_text(data=data, currency=currency)
    await ut.send_msg(
        msg_key=Key.CHECK_WALLET.value,
        chat_id=data['user_id'],
        edit_msg=data['message_id'],
        text=text,
        keyboard=kb.get_check_info_kb(data['use_points'], data['points'], data['promo'])
    )


# –ø—Ä–∏—ë–º –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ
@dp.message(StateFilter(UserStatus.EXCHANGE_SEND_WALLET))
async def check_wallet(msg: Message, state: FSMContext):
    # await msg.delete()

    data = await state.get_data()
    currency = await db.get_currency(data['currency_id'])

    checked_wallet = await db.get_wallet(code=currency.code, wallet=msg.text)
    if not checked_wallet:
        check = await ut.check_wallet(coin_code=currency.code, wallet=msg.text)
        if check:
            await db.add_wallet(user_id=msg.from_user.id, code=currency.code, wallet=msg.text)

        else:
            await msg.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞')

            text = f'<b>–£–∫–∞–∂–∏ {data["currency_name"]}-–ö–æ—à–µ–ª–µ–∫:</b>'
            await ut.send_msg(
                msg_key=Key.SAVE_PAY_METHOD.value,
                chat_id=msg.chat.id,
                edit_msg=data['message_id'],
                text=text,
                keyboard=kb.get_back_kb(CB.SELECT_PAYMENT.value)
            )
            return

    user_data = await db.get_user_info(msg.from_user.id)
    # currency = await db.get_currency(data['currency_id'])

    # await state.set_state('exchange')
    await state.update_data(data={
        'wallet': msg.text,
        'use_points': False,
        'points': user_data.balance,
        'user_id': msg.from_user.id
    })
    data = await state.get_data()

    await check_info_output(data)

    # await bot.delete_message(chat_id=msg.from_user.id, message_id=data['message_id'])
    # text = ut.get_check_info_text(data=data, currency=currency)
    # sent = await ut.send_msg(
    #     msg_key=Key.CHECK_WALLET.value,
    #     chat_id=msg.chat.id,
    #     text=text,
    #     keyboard=kb.get_check_info_kb(data['use_points'], data['points'], data['promo'])
    # )
    #
    # await state.update_data(data={'message_id': sent.message_id})


# –Ω–∞–∑–∞–¥ –∫ —á–µ–∫–∏–Ω—Ñ–æ
@dp.callback_query(lambda cb: cb.data.startswith(CB.BACK_CHECK_INFO.value))
async def back_check_info(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await check_info_output(data)


# –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥
@dp.callback_query(lambda cb: cb.data.startswith(CB.ADD_PROMO.value))
async def add_promo(cb: CallbackQuery, state: FSMContext):
    await state.set_state(UserStatus.EXCHANGE_SEND_PROMO)
    text = f'<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É</b>'

    await ut.send_msg(
        msg_key=Key.ADD_PROMO.value,
        chat_id=cb.chat.id,
        edit_msg=cb.message.message_id,
        text=text,
        keyboard=kb.get_back_kb(CB.BACK_CHECK_INFO.value)
    )


# –ø—Ä–∏—ë–º –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(StateFilter(UserStatus.EXCHANGE_SEND_PROMO))
async def check_info_promo(msg: Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()

    promo_data = await db.get_promo(msg.text)
    if not promo_data:
        sent = await msg.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥')
        await sleep(3)
        await bot.delete_message(sent.chat.id, sent.message_id)
        return

    used_promo = await db.get_used_promo(promo=msg.text, user_id=msg.from_user.id)

    if (promo_data.is_onetime and used_promo) or (len(used_promo) >= promo_data.many):
        sent = await msg.answer('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø—Ä–∏–º–µ–Ω—ë–Ω')
        await sleep(3)
        await bot.delete_message(sent.chat.id, sent.message_id)

    else:
        promo_amount = data['total_amount'] - promo_data.rate
        if promo_amount < 1:
            promo_amount = 1

        # promo_amount = check_unique_amount(promo_amount)
        await state.update_data(data={
            'promo': promo_data.promo,
            'promo_rate': promo_data.rate,
            # 'promo_used_id': promo_data.promo_used_id,
            'total_amount': promo_amount
        })

        data = await state.get_data()
        await check_info_output(data)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã
@dp.callback_query(lambda cb: cb.data.startswith(CB.USE_CASHBACK.value))
async def use_cashback(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db.get_user_info(cb.from_user.id)

    if data['total_amount'] > user.balance:
        total_amount = data['total_amount'] - user.balance
        used_balance = user.balance
    else:
        total_amount = 1
        used_balance = (user.balance - data['total_amount']) + 1

    await db.update_user_info(user_id=cb.from_user.id, add_balance=0 - used_balance)

    # total_amount = check_unique_amount(total_amount)
    # update_balance(cb.from_user.id, return_points)

    await state.update_data(data={
        'use_points': True,
        # 'spent_points': use_points,
        'return_points': used_balance,
        'total_amount': total_amount
    })

    data = await state.get_data()
    await check_info_output(data)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É–º–º—ã
@dp.callback_query(lambda cb: cb.data.startswith(CB.PAYMENT_ADD.value))
async def payment(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    currency = await db.get_currency(data['currency_id'])

    # total_amount = check_unique_amount(data['total_amount'])

    # await state.update_data(data={'total_amount': total_amount})
    data = await state.get_data()

    if data.get('promo'):
        promo_used_id = await db.add_used_promo(user_id=cb.from_user.id, promo=data['promo'])
    else:
        promo_used_id = 0

    order_id = await db.add_order(
        user_id=cb.from_user.id,
        coin=currency.code,
        pay_method=data['pay_method'],
        coin_sum=data['coin_sum'],
        wallet=data['wallet'],
        promo=data.get('promo'),
        promo_rate=data.get('promo_rate', 0),
        exchange_rate=data['exchange_rate'],
        percent=data['percent'],
        amount=data['amount'],
        used_points=data.get('used_point', 0),
        total_amount=data['total_amount'],
        message_id=cb.message.message_id,
        promo_used_id=promo_used_id,
        commission=data['commission'],
    )
    
    pay_method_info = await db.get_pay_method(method_id=data['pay_method_id'])
    await state.update_data(data={'order_id': order_id})

    await cb.answer(text='–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥ –Ω–µ –Ω–∞ —Ç–æ—Ç –±–∞–Ω–∫ - –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. '
                         '–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.',
                    show_alert=True
                    )

    text = f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</b> {order_id}\n' \
           f'<b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞:</b> {data["pay_method"]}\n' \
           f'<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{pay_method_info.card}</code>\n' \
           f'<b>–°—É–º–º–∞:</b> {data["total_amount"]} RUB\n\n' \
           f'<b>–í–∞–∂–Ω–æ:</b> –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ–π, –∏–Ω–∞—á–µ –∑–∞—è–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞. ' \
           f'–í—Å–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø–æ –æ–±–º–µ–Ω—É –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.\n\n' \
           f'<b>–í–ê–ñ–ù–û, –ü–ï–†–ï–í–û–î –°–¢–†–û–ì–û –ù–ê –£–ö–ê–ó–ê–ù–ù–´–ô –ë–ê–ù–ö, –ò–ù–ê–ß–ï –í–´ –ü–û–¢–ï–†–Ø–ï–¢–ï –°–í–û–ò –°–†–ï–î–°–¢–í–ê!</b>'

    await ut.send_msg(
        msg_key=Key.PAYMENT.value,
        chat_id=cb.chat.id,
        edit_msg=cb.message.message_id,
        text=text,
        keyboard=kb.get_payment_conf_kb(order_id)
    )


# –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda cb: cb.data.startswith(CB.PAYMENT_CONF.value))
async def payment_conf(cb: CallbackQuery, state: FSMContext):
    _, order_str, action = cb.data.split(':')
    order_id = int(order_str)

    data = await state.get_data()
    await state.clear()

    if action == Action.DEL:
        await del_order(order_id, 'not_conf', cb.from_user.id, data['spent_points'], data['promo_used_id'],
                        data['chat_id'], data['message_id'], data['promo'])

    else:
        await db.update_orders(order_id=order_id, status=OrderStatus.NEW.value)

        text = f'–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {order_id}\n\n' \
               f'–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n' \
               f'–°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: {data["total_amount"]} RUB'

        await ut.send_msg(
            msg_key=Key.PAYMENT_CONF.value,
            chat_id=cb.chat.id,
            edit_msg=cb.message.message_id,
            text=text,
            keyboard=kb.get_payment_conf_kb(order_id)
        )

        username = f'@{cb.from_user.username}' if cb.from_user.username is not None else ''
        # text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n' \
        #        f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {cb_data[1]}\n' \
        #        f'<b>–û—Ç:</b> {cb.from_user.full_name} {username}\n' \
        #        f'<b>–í–∞–ª—é—Ç–∞:</b> {data["currency_name"]}\n' \
        #        f'<b>–°—É–º–º–∞ –≤–∞–ª—é—Ç—ã:</b> {data["sum_exchange"]}\n' \
        #        f'<b>–ù–∞ –∫–æ—à–µ–ª—ë–∫:</b> {data["wallet"]}\n' \
        #        f'<b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞:</b> {data["pay_method"]}\n' \
        #        f'<b>–°—É–º–º–∞ —Ä—É–±–ª–µ–π:</b> {data["total_amount"]} '

        # await cb.message.answer(text, parse_mode='html')

        text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n' \
               f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {order_id}\n' \
               f'<b>–û—Ç:</b> {cb.from_user.full_name} {username}\n' \
               f'<b>–í–∞–ª—é—Ç–∞:</b> {data["currency_name"]}\n' \
               f'<b>–°—É–º–º–∞ –≤–∞–ª—é—Ç—ã:</b> <code>{data["sum_exchange"]}</code>\n' \
               f'<b>–ù–∞ –∫–æ—à–µ–ª—ë–∫:</b> <code>{data["wallet"]}</code>\n' \
               f'<b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞:</b> {data["pay_method"]}\n' \
               f'<b>–°—É–º–º–∞ —Ä—É–±–ª–µ–π:</b> <code>{data["total_amount"]}</code>'
        try:
            await bot.send_message(Config.access_chat, text, parse_mode='html')
        except:
            text = f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n' \
                   f'<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {order_id}\n' \
                   f'<b>–û—Ç:</b> {cb.from_user.full_name} {username}\n' \
                   f'<b>–í–∞–ª—é—Ç–∞:</b> {data["currency_name"]}\n' \
                   f'<b>–°—É–º–º–∞ –≤–∞–ª—é—Ç—ã:</b> {data["sum_exchange"]}\n' \
                   f'<b>–ù–∞ –∫–æ—à–µ–ª—ë–∫:</b> {data["wallet"]}\n' \
                   f'<b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞:</b> {data["pay_method"]}\n' \
                   f'<b>–°—É–º–º–∞ —Ä—É–±–ª–µ–π:</b> {data["total_amount"]} '
            await bot.send_message(Config.access_chat, text, parse_mode='html')


