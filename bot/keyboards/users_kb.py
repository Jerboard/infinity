from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

import db
from config import Config
from enums import CB, Action


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–ø—á–æ–π
def get_capcha_kb(items: list[list], match: dict, referrer) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for item in items:
        if item == match:
            kb.button(text=item[1], callback_data=f'{CB.CAPCHA.value}:1:{referrer}')
        else:
            kb.button(text=item[1], callback_data=f'{CB.CAPCHA.value}:0:{referrer}')

    return kb.adjust(3).as_markup()


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_start_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ö–£–ü–ò–¢–¨', callback_data=CB.EXCHANGE.value)
    kb.button(text='–ü–†–û–î–ê–¢–¨', callback_data=CB.SELL.value)
    kb.button(text='–õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢', callback_data=CB.ACCOUNT.value)
    # kb.button(text='–ê–ù–¢–ò–°–ü–ê–ú –ë–û–¢', callback_data=CB.ANTISPAM.value)
    kb.button(text='–ê–ù–¢–ò–°–ü–ê–ú –ë–û–¢', url=Config.antispam_url)
    kb.button(text='–ö–û–ù–¢–ê–ö–¢–´', callback_data=CB.INFO.value)
    return kb.adjust(2, 1, 2).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –õ–ö
def get_account_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ü–†–û–ú–û–ö–û–î', callback_data=CB.PROMO.value)
    kb.button(text='–ü–ê–†–¢–ù–Å–†–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê', callback_data=CB.PARTNER.value)
    kb.button(text='–ö–ï–®–ë–≠–ö', callback_data=CB.CASHBACK.value)
    kb.button(text='–í–´–í–û–î –ë–û–ù–£–°–û–í', callback_data=CB.TAKE_BONUS.value)
    kb.button(text='–ò–°–¢–û–†–ò–Ø –û–ë–ú–ï–ù–û–í', callback_data=f'{CB.HISTORY.value}:0')
    # kb.button(text='–ò–°–ü–´–¢–ê–ô –£–î–ê–ß–£', callback_data=CB.GAMBLING.value)
    kb.button(text=f'üîô –ù–ê–ó–ê–î', callback_data=f'{CB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# –Ω–∞–∑–∞–¥
def get_back_kb(cb: str, arg: str = Action.BACK.value) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{cb}:{arg}')
    return kb.adjust(1).as_markup()


# –æ—Ç–º–µ–Ω–∞
def get_cancel_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=CB.CANCEL.value)
    return kb.adjust(1).as_markup()


# –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É
def get_sell_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'–û–ø–µ—Ä–∞—Ç–æ—Ä', url=Config.operator_url)
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞–ª—é—Ç
def get_currency_list_kb(currencies: tuple[db.CurrencyRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for currency in currencies:
        kb.button(text=f'{currency.name} ({currency.code})', callback_data=f'{CB.SELECT_PAYMENT.value}:{currency.id}')

    back_bt = InlineKeyboardBuilder()
    back_bt.button(text='üîô –ù–∞–∑–∞–¥', callback_data=CB.BACK_START.value)
    # back_bt.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.CANCEL.value}')
    return kb.adjust(2).attach(back_bt).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã–π
def get_pay_method_kb(pay_methods: tuple[db.PayMethodRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for method in pay_methods:
        kb.button(text=f'{method.name}', callback_data=f'{CB.SEND_SUM.value}:{method.id}')
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.EXCHANGE.value}')
    # kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.CANCEL.value}')
    return kb.adjust(1).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã–π
def get_main_exchange_kb(
        bonuses: int,
        promo: db.UsedPromoRow = None
) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if promo:
        kb.button(text='–ò–°–ü. –ü–†–û–ú–û–ö–û–î', callback_data=CB.USE_PROMO.value)
        adjust = 1, 1, 2
    else:
        adjust = 1, 2

    # kb.button(text=f'–ò–°–ü. –ë–ê–õ–ê–ù–° –ö–û–®–ï–õ–¨–ö–ê {bonuses} —Ä—É–±.', callback_data=CB.USE_CASHBACK.value)
    kb.button(text=f'–ò–°–ü. –ë–ê–õ–ê–ù–° –ö–û–®–ï–õ–¨–ö–ê', callback_data=CB.USE_CASHBACK.value)
    kb.button(text=f'‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data=f'{CB.SEND_WALLET.value}')
    kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.CANCEL.value}')
    return kb.adjust(*adjust).as_markup()


# –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
def get_payment_conf_kb(order_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'–Ø –û–ü–õ–ê–¢–ò–õ', callback_data=f'{CB.PAYMENT_CONF.value}:{order_id}:{Action.ADD.value}')
    kb.button(text=f'–û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–Ø–í–ö–£', callback_data=f'{CB.PAYMENT_CONF.value}:{order_id}:{Action.DEL.value}')

    return kb.adjust(1).as_markup()


# –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def get_sending_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data=f'{CB.SENDING_MESSAGE.value}:{Action.SEND.value}')
    kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'{CB.SENDING_MESSAGE.value}:{Action.DEL.value}')
    return kb.adjust(1).as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É –ø—Ä–æ–º–æ
# def get_replace_promo_kb(old_promo_id: int, new_promo_id: int) -> InlineKeyboardMarkup:
def get_replace_promo_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data=f'{CB.REPLACE_PROMO.value}')
    # kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.PROMO.value}')
    kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.CANCEL.value}')
    return kb.adjust(1).as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É –ø—Ä–æ–º–æ
def get_conf_take_bonus_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'{CB.TAKE_BONUS_CONF.value}')
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.TAKE_BONUS.value}')
    return kb.adjust(1).as_markup()


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É –ø—Ä–æ–º–æ
def get_history_kb(start: int, end_page: bool) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    btn_count = 0
    if start > 0:
        btn_count += 1
        kb.button(text=f'–ü–†–ï–î –°–¢–†.', callback_data=f'{CB.HISTORY.value}:{start - Config.batch_size}')
    if end_page:
        btn_count += 1
        kb.button(text=f'–°–õ–ï–î –°–¢–†.', callback_data=f'{CB.HISTORY.value}:{start + Config.batch_size}')

    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.ACCOUNT.value}')
    kb.adjust(2, 1) if btn_count == 2 else kb.adjust(1)
    return kb.as_markup()


# –ê–Ω—Ç–∏—Å–ø–∞–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def get_antispam_user_kb(on: bool = True) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if on:
        kb.button(text=f'–ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°', callback_data=f'{CB.ADMIN_ANTISPAM.value}:{Action.SEND.value}:{Config.antispam_chat}')
    else:
        kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.ADMIN_ANTISPAM.value}:{Action.DEL.value}:{Config.antispam_chat}')

    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# –ê–Ω—Ç–∏—Å–ø–∞–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω
def get_antispam_admin_kb(user_id: int, on: bool = True) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if on:
        kb.button(text=f'üì≤ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{CB.ADMIN_ANTISPAM.value}:{Action.SEND.value}:{user_id}')
    else:
        kb.button(text=f'‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{CB.ADMIN_ANTISPAM.value}:{Action.DEL.value}:{user_id}')
    return kb.adjust(1).as_markup()


# –∫–ª–∞–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def get_info_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text='–ö–ê–ù–ê–õ', url='https://t.me/infinity_ex_channel')
    # kb.button(text='–ß–ê–¢', url='https://t.me/+nhqLfHn7ues5YjQ6')
    kb.button(text='–ß–ê–¢', url='https://t.me/+nzNlzzrwBUQ4YjRi')
    kb.button(text='–û–¢–ó–´–í–´', url='https://t.me/infinity_ex_comment')
    kb.button(text='–ú–ï–ù–ï–î–ñ–ï–†', url='https://t.me/manager_Infinity')
    kb.button(text='–û–ü–ï–†–ê–¢–û–†', url='https://t.me/operator_Infinity')
    kb.button(
        text='–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï',
        url='https://telegra.ph/Polzovatelskoe-soglashenie-The-Infinity-Exchange-12-25'
    )
    kb.button(text='–û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í', callback_data=CB.FEEDBACK.value)
    kb.button(text='üîô –ù–ê–ó–ê–î', callback_data=CB.BACK_START.value)
    return kb.adjust(2, 1).as_markup()


# –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É
def get_feedback_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data=CB.PUBLISH_FEEDBACK.value)
    kb.button(text=f'‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'{CB.CANCEL.value}')
    return kb.adjust(1).as_markup()


# –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É
def get_done_order_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í', callback_data=CB.FEEDBACK.value)
    return kb.adjust(1).as_markup()
