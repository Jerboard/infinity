from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

import db
from enums import CB, Action


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–ø—á–æ–π
def get_capcha_kb(items: list[list], match: dict, referrer) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for item in items:
        if item == match:
            kb.button(text=item[1], callback_data=f'{CB.CONTACTS.value}:{referrer}')
        else:
            kb.button(text=item[1], callback_data=f'{CB.CONTACTS.value}:0')

    return kb.adjust(3).as_markup()


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_start_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–û–ë–ú–ï–ù', callback_data=CB.EXCHANGE.value)
    kb.button(text='–õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢', callback_data=CB.SETTINGS.value)
    kb.button(text='–ê–ù–¢–ò–°–ü–ê–ú –ë–û–¢', callback_data=CB.ANTISPAM.value)
    kb.button(text='–ö–û–ù–¢–ê–ö–¢–´', callback_data=CB.CONTACTS.value)
    return kb.adjust(1, 1, 2).as_markup()


# –Ω–∞–∑–∞–¥
def get_back_kb(cb: str, arg: str = Action.BACK.value):
    kb = InlineKeyboardBuilder()
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{cb}:{arg}')
    return kb.adjust(1).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞–ª—é—Ç
def get_currency_list_kb(currencies: tuple[db.CurrencyRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for currency in currencies:
        kb.button(text=f'{currency.name} ({currency.code})', callback_data=f'{CB.SELECT_PAYMENT.value}:{currency.id}')

    back_bt = InlineKeyboardBuilder()
    back_bt.button(text='üîô –ù–∞–∑–∞–¥', callback_data=CB.BACK_START.value)
    return kb.adjust(2).attach(back_bt).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
def get_pay_method_kb(sum_rub: float, pay_methods: tuple[db.PayMethodRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for pay_method in pay_methods:
        kb.button(text=f'{pay_method.name} ({sum_rub} —Ä—É–±.)', callback_data=f'{CB.SEND_WALLET.value}:{pay_method.id}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.SELECT_PAYMENT.value}:{Action.BACK.value}')
    return kb.adjust(1).as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã–π
def get_check_info_kb(use_points: bool, points: int, promo: str = None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', callback_data=CB.PAYMENT_ADD.value)
    if not promo:
        kb.button(text='–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data=CB.ADD_PROMO.value)
    if points and not use_points:
        kb.button(text=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã ({points})', callback_data=CB.USE_CASHBACK.value)
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.SEND_WALLET.value}:{Action.BACK.value}')

    return kb.adjust(1).as_markup()


# –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
def get_payment_conf_kb(order_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=f'‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f'{CB.PAYMENT_CONF.value}:{order_id}:{Action.ADD.value}')
    kb.button(text=f'‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'{CB.PAYMENT_CONF.value}:{order_id}:{Action.DEL.value}')
    kb.button(text=f'üîô –ù–∞–∑–∞–¥', callback_data=f'{CB.BACK_CHECK_INFO.value}')

    return kb.adjust(1).as_markup()


# –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def get_sending_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data=f'{CB.SENDING_MESSAGE.value}:{Action.SEND.value}')
    kb.button(text='üóë–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'{CB.SENDING_MESSAGE.value}:{Action.DEL.value}')
    return kb.adjust(1).as_markup()